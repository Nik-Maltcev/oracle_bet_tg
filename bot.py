import os
import re
import json
from datetime import datetime, date
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, PreCheckoutQueryHandler, filters, ContextTypes
import requests

PERPLEXITY_API_KEY = os.getenv("PERPLEXITY_API_KEY", "")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")

def call_perplexity(prompt: str, model: str = "deepseek-r1") -> str:
    """–í—ã–∑–æ–≤ Perplexity API"""
    url = "https://api.perplexity.ai/chat/completions"
    headers = {
        "Authorization": f"Bearer {PERPLEXITY_API_KEY}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": model,
        "messages": [
            {
                "role": "system",
                "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ê–ö–¢–£–ê–õ–¨–ù–´–ï –∏ –ü–†–û–í–ï–†–ï–ù–ù–´–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. –ü—Ä–æ–≤–µ—Ä—è–π —Ñ–∞–∫—Ç—ã –¥–≤–∞–∂–¥—ã. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ - —É–∫–∞–∂–∏ —ç—Ç–æ —è–≤–Ω–æ."
            },
            {
                "role": "user",
                "content": prompt
            }
        ],
        "temperature": 0.2,
        "max_tokens": 2000
    }
    
    try:
        response = requests.post(url, json=payload, headers=headers, timeout=60)
        response.raise_for_status()
        data = response.json()
        return data["choices"][0]["message"]["content"]
    except requests.exceptions.RequestException as e:
        # –ï—Å–ª–∏ deepseek-r1 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º sonar-pro
        if model == "deepseek-r1":
            return call_perplexity(prompt, model="sonar-pro")
        return f"–û—à–∏–±–∫–∞ API: {str(e)}"

def parse_match_input(text: str) -> tuple:
    """–ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ '–∫–æ–º–∞–Ω–¥–∞1 - –∫–æ–º–∞–Ω–¥–∞2 –¥–¥.–º–º.–≥–≥'"""
    pattern = r"(.+?)\s*-\s*(.+?)\s+(\d{2}\.\d{2}\.\d{2})"
    match = re.search(pattern, text, re.IGNORECASE)
    
    if match:
        team1 = match.group(1).strip()
        team2 = match.group(2).strip()
        date_str = match.group(3).strip()
        return team1, team2, date_str
    return None, None, None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    balance = get_balance(user_id)
    
    keyboard = [[InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã", callback_data="buy")]]
    
    await update.message.reply_text(
        f"‚öΩ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π.\n\n"
        f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å –º–∞—Ç—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"–∫–æ–º–∞–Ω–¥–∞1 - –∫–æ–º–∞–Ω–¥–∞2 –¥–¥.–º–º.–≥–≥\n\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: —é–≤–µ–Ω—Ç—É—Å - –º–∏–ª–∞–Ω 07.10.25",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def buy_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("‚≠ê 3 –ø—Ä–æ–≥–Ω–æ–∑–∞ - 100 –∑–≤–µ–∑–¥", callback_data="buy_3")],
        [InlineKeyboardButton("‚≠ê 15 –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ - 250 –∑–≤–µ–∑–¥", callback_data="buy_15")],
        [InlineKeyboardButton("üéÅ 10 –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ë–ï–°–ü–õ–ê–¢–ù–û", url="https://t.me/tribute/app?startapp=svTk")]
    ]
    
    await query.edit_message_text(
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç:\n\n"
        "‚≠ê 3 –ø—Ä–æ–≥–Ω–æ–∑–∞ - 100 –∑–≤–µ–∑–¥\n"
        "‚≠ê 15 –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ - 250 –∑–≤–µ–∑–¥\n\n"
        "üéÅ –ò–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ 10 –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ë–ï–°–ü–õ–ê–¢–ù–û\n"
        "–ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø—Ä–µ–º–∏—É–º –∫–∞–Ω–∞–ª!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def process_buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    packages = {
        "buy_3": (3, 100, "3 –ø—Ä–æ–≥–Ω–æ–∑–∞"),
        "buy_15": (15, 250, "15 –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    }
    
    if query.data not in packages:
        return
    
    predictions, stars, title = packages[query.data]
    
    await context.bot.send_invoice(
        chat_id=query.message.chat_id,
        title=title,
        description=f"–ü–æ–∫—É–ø–∫–∞ {predictions} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏",
        payload=f"{predictions}",
        provider_token="",
        currency="XTR",
        prices=[LabeledPrice(label=title, amount=stars)]
    )

async def precheckout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.pre_checkout_query.answer(ok=True)

async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    predictions = int(update.message.successful_payment.invoice_payload)
    
    add_balance(user_id, predictions)
    balance = get_balance(user_id)
    
    await update.message.reply_text(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
        f"üíé –î–æ–±–∞–≤–ª–µ–Ω–æ: {predictions} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤\n"
        f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"
    )

def load_data():
    try:
        with open('data.json', 'r') as f:
            return json.load(f)
    except:
        return {"usage": {}, "balance": {}}

def save_data(data):
    with open('data.json', 'w') as f:
        json.dump(data, f)

def get_balance(user_id):
    data = load_data()
    return data["balance"].get(str(user_id), 0)

def add_balance(user_id, amount):
    data = load_data()
    user_key = str(user_id)
    data["balance"][user_key] = data["balance"].get(user_key, 0) + amount
    save_data(data)

def can_use(user_id):
    return get_balance(user_id) > 0

def use_prediction(user_id):
    data = load_data()
    user_key = str(user_id)
    if data["balance"].get(user_key, 0) > 0:
        data["balance"][user_key] -= 1
        save_data(data)
        return True
    return False

async def analyze_match(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞"""
    user_id = update.effective_user.id
    
    if not can_use(user_id):
        keyboard = [[InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã", callback_data="buy")]]
        await update.message.reply_text(
            "‚õî –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø—Ä–æ–≥–Ω–æ–∑—ã!\n\n"
            "–ö—É–ø–∏—Ç–µ –ø–∞–∫–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ 10 –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
            "–ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø—Ä–µ–º–∏—É–º –∫–∞–Ω–∞–ª.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    user_input = update.message.text
    team1, team2, match_date = parse_match_input(user_input)
    
    if not team1 or not team2 or not match_date:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π:\n"
            "–∫–æ–º–∞–Ω–¥–∞1 - –∫–æ–º–∞–Ω–¥–∞2 –¥–¥.–º–º.–≥–≥\n\n"
            "–ü—Ä–∏–º–µ—Ä: —é–≤–µ–Ω—Ç—É—Å - –º–∏–ª–∞–Ω 07.10.25"
        )
        return
    
    await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–∞—Ç—á, –ø–æ–¥–æ–∂–¥–∏...")
    
    if not use_prediction(user_id):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞")
        return
    
    prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–∞—Ç—á {team1} vs {team2} –Ω–∞ –¥–∞—Ç—É {match_date}.

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã –ª–∏–≥, Transfermarkt, ESPN, BBC Sport).

–ü—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑:

1. –§–û–†–ú–ê –ö–û–ú–ê–ù–î (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5-10 –º–∞—Ç—á–µ–π):
   - {team1}: —Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –¥–∞—Ç–∞–º–∏ –∏ —Å—á–µ—Ç–æ–º
   - {team2}: —Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –¥–∞—Ç–∞–º–∏ –∏ —Å—á–µ—Ç–æ–º
   - –£–∫–∞–∂–∏ —Ç—É—Ä–Ω–∏—Ä –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞

2. –õ–ò–ß–ù–´–ï –í–°–¢–†–ï–ß–ò (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π H2H):
   - –î–∞—Ç–∞, —Å—á–µ—Ç, —Ç—É—Ä–Ω–∏—Ä
   - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ–≤, –≤–ª–∞–¥–µ–Ω–∏—è

3. –¢–ï–ö–£–©–ï–ï –ü–û–õ–û–ñ–ï–ù–ò–ï:
   - –ú–µ—Å—Ç–æ –≤ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
   - –û—á–∫–∏, —Ä–∞–∑–Ω–∏—Ü–∞ –º—è—á–µ–π
   - –î–æ–º–∞—à–Ω—è—è/–≤—ã–µ–∑–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

4. –ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–û–†–´:
   - –¢—Ä–∞–≤–º—ã –∏ –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Å –∏–º–µ–Ω–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤)
   - –ú–æ—Ç–∏–≤–∞—Ü–∏—è (–±–æ—Ä—å–±–∞ –∑–∞ –º–µ—Å—Ç–æ, –µ–≤—Ä–æ–∫—É–±–∫–∏, –≤—ã–ª–µ—Ç)
   - –¢–∞–∫—Ç–∏–∫–∞ –∏ —Å—Ç–∏–ª—å –∏–≥—Ä—ã

5. –ü–†–û–ì–ù–û–ó:
   - –ò—Å—Ö–æ–¥ (1X2) —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –≤ %
   - –¢–æ—Ç–∞–ª (–±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ 2.5) —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
   - –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞

–ï–°–õ–ò –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–ª–∏ –æ–Ω–∏ —É—Å—Ç–∞—Ä–µ–ª–∏ - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏ —ç—Ç–æ!"""
    
    result = call_perplexity(prompt)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (—É–±–∏—Ä–∞–µ–º markdown —Å–∏–º–≤–æ–ª—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
    clean_result = result.replace('**', '').replace('*', '').replace('###', '').replace('##', '').replace('#', '')
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    lines = clean_result.split('\n')
    formatted_lines = []
    for line in lines:
        if '|' in line and not line.strip().startswith('|---'):
            # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã —Ç–∞–±–ª–∏—Ü—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
            clean_line = line.replace('|', ' ').strip()
            if clean_line:
                formatted_lines.append(clean_line)
        elif not line.strip().startswith('|---'):
            formatted_lines.append(line)
    
    clean_result = '\n'.join(formatted_lines)
    
    response = f"‚öΩ <b>–ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞</b>\n"
    response += f"<b>{team1} - {team2}</b>\n"
    response += f"üìÖ –î–∞—Ç–∞: {match_date}\n\n"
    response += clean_result
    
    await update.message.reply_text(response, parse_mode="HTML")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not PERPLEXITY_API_KEY or not TELEGRAM_BOT_TOKEN:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è PERPLEXITY_API_KEY –∏ TELEGRAM_BOT_TOKEN")
        return
    
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(buy_menu, pattern="^buy$"))
    app.add_handler(CallbackQueryHandler(process_buy, pattern="^buy_"))
    app.add_handler(PreCheckoutQueryHandler(precheckout))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, analyze_match))
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
