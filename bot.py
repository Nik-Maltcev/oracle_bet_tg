import os
import re
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests

PERPLEXITY_API_KEY = os.getenv("PERPLEXITY_API_KEY", "")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")

def call_perplexity(prompt: str, model: str = "deepseek-r1") -> str:
    """–í—ã–∑–æ–≤ Perplexity API"""
    url = "https://api.perplexity.ai/chat/completions"
    headers = {
        "Authorization": f"Bearer {PERPLEXITY_API_KEY}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": model,
        "messages": [
            {
                "role": "system",
                "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–∞—Ç—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —Ñ–æ—Ä–º—ã –∫–æ–º–∞–Ω–¥, –ª–∏—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á –∏ –¥—Ä—É–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤."
            },
            {
                "role": "user",
                "content": prompt
            }
        ]
    }
    
    try:
        response = requests.post(url, json=payload, headers=headers, timeout=60)
        response.raise_for_status()
        data = response.json()
        return data["choices"][0]["message"]["content"]
    except requests.exceptions.RequestException as e:
        # –ï—Å–ª–∏ deepseek-r1 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º sonar-pro
        if model == "deepseek-r1":
            return call_perplexity(prompt, model="sonar-pro")
        return f"–û—à–∏–±–∫–∞ API: {str(e)}"

def parse_match_input(text: str) -> tuple:
    """–ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ '–∫–æ–º–∞–Ω–¥–∞1 - –∫–æ–º–∞–Ω–¥–∞2 –¥–¥.–º–º.–≥–≥'"""
    pattern = r"(.+?)\s*-\s*(.+?)\s+(\d{2}\.\d{2}\.\d{2})"
    match = re.search(pattern, text, re.IGNORECASE)
    
    if match:
        team1 = match.group(1).strip()
        team2 = match.group(2).strip()
        date_str = match.group(3).strip()
        return team1, team2, date_str
    return None, None, None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await update.message.reply_text(
        "‚öΩ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –º–∞—Ç—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–∫–æ–º–∞–Ω–¥–∞1 - –∫–æ–º–∞–Ω–¥–∞2 –¥–¥.–º–º.–≥–≥\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: —é–≤–µ–Ω—Ç—É—Å - –º–∏–ª–∞–Ω 07.10.25\n\n"
        "–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–∞—Ç—á –∏ –¥–∞–º –ø—Ä–æ–≥–Ω–æ–∑!"
    )

async def analyze_match(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞"""
    user_input = update.message.text
    team1, team2, match_date = parse_match_input(user_input)
    
    if not team1 or not team2 or not match_date:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π:\n"
            "–∫–æ–º–∞–Ω–¥–∞1 - –∫–æ–º–∞–Ω–¥–∞2 –¥–¥.–º–º.–≥–≥\n\n"
            "–ü—Ä–∏–º–µ—Ä: —é–≤–µ–Ω—Ç—É—Å - –º–∏–ª–∞–Ω 07.10.25"
        )
        return
    
    await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–∞—Ç—á, –ø–æ–¥–æ–∂–¥–∏...")
    
    prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –º–∞—Ç—á {team1} - {team2}, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–æ–∏—Ç—Å—è {match_date}.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
1. –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º—ã –æ–±–µ–∏—Ö –∫–æ–º–∞–Ω–¥
2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–∏—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
3. –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã (—Ç—Ä–∞–≤–º—ã, –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏, –º–æ—Ç–∏–≤–∞—Ü–∏—è)
4. –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∏—Å—Ö–æ–¥ –º–∞—Ç—á–∞ (–ø–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã 1, –Ω–∏—á—å—è, –ø–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã 2) —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
5. –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ç–æ—Ç–∞–ª –≥–æ–ª–æ–≤ (–±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ 2.5) —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º

–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –∏ –æ—Å–Ω–æ–≤—ã–≤–∞–π—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    
    result = call_perplexity(prompt)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = f"‚öΩ <b>–ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞</b>\n"
    response += f"<b>{team1} - {team2}</b>\n"
    response += f"üìÖ –î–∞—Ç–∞: {match_date}\n\n"
    response += result
    
    await update.message.reply_text(response, parse_mode="HTML")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not PERPLEXITY_API_KEY or not TELEGRAM_BOT_TOKEN:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è PERPLEXITY_API_KEY –∏ TELEGRAM_BOT_TOKEN")
        return
    
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, analyze_match))
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
